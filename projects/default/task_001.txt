# Task ID: 1
# Title: プロジェクトセットアップとディレクトリ構造の作成
# Status: pending
# Dependencies: None
# Priority: high
# Description: Todo アプリケーションの基本的なプロジェクト構造を作成し、必要な依存関係をセットアップする
# Details:
React + TypeScript + Viteを使用してプロジェクトを初期化。package.jsonの設定、ESLint、Prettier、TailwindCSSの導入。src/components、src/hooks、src/types、src/utilsディレクトリを作成。

# Test Strategy:
プロジェクトが正常にビルドでき、開発サーバーが起動することを確認

# Subtasks:
## 1. Viteを使用したReact+TypeScriptプロジェクトの初期化 [pending]
### Dependencies: None
### Description: Viteを使用してReactとTypeScriptをサポートする新しいプロジェクトを作成し、基本的な設定を行う
### Details:
1. Node.jsとnpmがインストールされていることを確認
2. `npm create vite@latest todo-app -- --template react-ts`コマンドを実行
3. 作成されたプロジェクトディレクトリに移動
4. `npm install`を実行して初期依存関係をインストール
5. プロジェクトが正常に動作することを確認するため`npm run dev`を実行

## 2. ESLintとPrettierの設定 [pending]
### Dependencies: 1.1
### Description: コード品質とフォーマットの一貫性を確保するためのESLintとPrettierの設定を行う
### Details:
1. `npm install -D eslint eslint-plugin-react eslint-plugin-react-hooks @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-plugin-import`を実行
2. `npm install -D prettier eslint-config-prettier eslint-plugin-prettier`を実行
3. プロジェクトルートに`.eslintrc.js`ファイルを作成し、React+TypeScript用の設定を追加
4. `.prettierrc`ファイルを作成し、コードフォーマットルールを定義
5. package.jsonに`lint`と`format`スクリプトを追加
6. `.vscode/settings.json`を作成し、保存時の自動フォーマットを設定

## 3. TailwindCSSのインストールと設定 [pending]
### Dependencies: 1.1
### Description: スタイリングのためにTailwindCSSをプロジェクトに導入し、基本設定を行う
### Details:
1. `npm install -D tailwindcss postcss autoprefixer`を実行
2. `npx tailwindcss init -p`を実行して設定ファイルを生成
3. tailwind.config.jsを編集し、contentセクションに`["./index.html", "./src/**/*.{js,ts,jsx,tsx}"]`を追加
4. src/index.cssに以下のTailwindディレクティブを追加:
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```
5. 簡単なTailwindクラスをApp.tsxに追加してテスト

## 4. プロジェクトディレクトリ構造の作成 [pending]
### Dependencies: 1.1
### Description: アプリケーションの整理された構造のために必要なディレクトリを作成する
### Details:
1. `src`ディレクトリ内に以下のフォルダを作成:
   - `components`: UIコンポーネントを格納
   - `hooks`: カスタムReactフックを格納
   - `types`: TypeScriptの型定義を格納
   - `utils`: ユーティリティ関数を格納
   - `assets`: 画像やその他の静的ファイルを格納
   - `contexts`: Reactコンテキストを格納
2. 各ディレクトリに`.gitkeep`ファイルを追加して空のディレクトリがGitに追跡されるようにする
3. 必要に応じて`components`内にさらにサブディレクトリ（例：`ui`、`layout`、`todo`など）を作成

## 5. 基本的な型定義とサンプルコンポーネントの作成 [pending]
### Dependencies: 1.3, 1.4
### Description: Todoアプリケーションで使用する基本的な型定義とサンプルコンポーネントを作成する
### Details:
1. `src/types/index.ts`を作成し、以下の基本的な型を定義:
```typescript
export interface Todo {
  id: string;
  title: string;
  completed: boolean;
  createdAt: Date;
}
```
2. `src/components/ui/Button.tsx`にシンプルなボタンコンポーネントを作成
3. `src/components/todo/TodoItem.tsx`に基本的なTodoアイテム表示用コンポーネントを作成
4. App.tsxを更新して、作成したコンポーネントをインポートし表示
5. `src/utils/helpers.ts`にIDを生成するユーティリティ関数を追加

